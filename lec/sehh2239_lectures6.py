# -*- coding: utf-8 -*-
"""SEHH2239_lectures.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qly4fPdGfdI_cRO8tSg5PCBejITEZpfM

# Lecture 06: list
"""

class Node: 
		def __init__(self, element, next=None):
				self.element = element
				self.next = next
		def __repr__(self):     
				if self:        
						return f"{self.element} -> {self.next}"
		
class SLinkedList:
		def __init__(self):
				self.head = None 
		def __repr__(self):
				return f'{self.head}'
		def isEmpty(self):
			return self.head is None
			pass
		def size(self):
			size = 0
			cur = self.head
			while cur: # while cur is not None
			# when cur is not None, then bool(cur) = True
				size+=1
				cur=cur.next
			return size 
			pass
		def get(self, i):
			# 0<=i<=size-1
			count = 0 # show the index of the node I am now in
			cur = self.head
			while cur and count!=i:
				cur = cur.next
				count+=1

			if cur is None: # the i is out of bound
				return None
			else: # the i is in-bound
				return cur.element
			pass
		def indexOf(self, el):
			# el is a Node, not a value
			count = 0
			cur = self.head
			while cur and cur is not el:
				cur=cur.next
				count +=1 
			
			# when we exit while loop, there are two possibilities:
			# 1. cur == None => el is not in the linked list
			# 2. cur != None => el points to el
			if cur is None:
				return -1
			else:
				return count
			pass
		def addAtHead(self, x):
			# x is a value, not a Node
			# we need to create a Node, whose value is x
			new = Node(x, next=self.head)
			self.head = new 
			pass
		def addAtTail(self, x):
			new = Node(x)
			cur = self.head
			if cur is None: # the list is empty
				self.head = new
				return
			while cur.next:
				 cur = cur.next
			cur.next = new 
			pass

		def add(self, index, x):
			if index == 0:
				self.addAtHead(x)
			else:
				cur = self.head
				count = 0 # want count to become index-1
				while cur and count != index-1:
					cur = cur.next
					count +=1 
				# when we exit while loop, two possibilities
				# 1. cur is None
				# 2. count == index-1
				if cur is None:
					print("index out of bound...")
				else:
					cur.next = Node(x, next=cur.next)
			pass
		def remove_by_index(self, index):
			if index == 0:
				self.head = self.head.next
			else:
				cur = self.head
				count = 0 # want count to become index-1
				while cur and count != index-1:
					cur = cur.next
					count +=1 
				# when we exit while loop, two possibilities
				# 1. cur is None
				# 2. count == index-1
				# print(cur.element)
				if cur is None or cur.next is None:
					print("index out of bound...")
				else:
					cur.next = cur.next.next
					
t = SLinkedList()
# t.add(0,1)
t.addAtTail(1)
t.addAtTail(2)
t.add(0,-1)
print(t)
t.remove_by_index(0)
print(t)
t.remove_by_index(1)
print(t)
t.remove_by_index(1)
print(t)


# t.add(1, 100)
# t.add(1, -1)
# t.add(100, 5)
# t.addAtHead(1)
# t.addAtHead(2)
# t.addAtHead(3)
# t.addAtTail(4)
# t.addAtTail(5)
# print(t)
# t.isEmpty()
# t.size()
# print(t.get())